{"version":3,"sources":["../src/app.js"],"names":["jsonResponseEstimation","xmlResponseEstimation","logsResponseEstimation","EstimateController","PORT","process","env","app","dirname","path","resolve","logPath","join","accessLogStream","fs","createWriteStream","flags","allowCrossDomain","req","res","next","header","use","bodyParser","json","urlencoded","extended","text","type","tokens","responseTime","parseInt","toString","length","logStr","method","url","status","stream","get","data","message","err","errors","error","listen"],"mappings":"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","sourcesContent":["/* eslint-disable no-unused-vars */\nimport express from 'express';\nimport bodyParser from 'body-parser';\nimport morgan from 'morgan';\nimport fs from 'fs';\nimport path from 'path';\nimport EstimateController from './controllers/estimateController';\n\nconst {\n  jsonResponseEstimation,\n  xmlResponseEstimation,\n  logsResponseEstimation\n} = EstimateController;\n\nconst PORT = process.env.PORT || 5000;\nconst app = express();\n\nconst dirname = path.resolve();\nconst logPath = path.join(dirname, 'logs', 'access.log');\nconst accessLogStream = fs.createWriteStream(logPath, { flags: 'a' });\n\n\nconst allowCrossDomain = (req, res, next) => {\n  res.header('Access-Control-Allow-Origin', '*');\n  res.header('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE');\n  res.header('Access-Control-Allow-Headers', 'Content-Type');\n  next();\n};\n\napp.use(allowCrossDomain);\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(bodyParser.text());\napp.use(bodyParser.json({ type: 'application/json' }));\n\napp.use(\n  morgan(\n    (tokens, req, res) => {\n      let responseTime = parseInt(tokens['response-time'](req, res), 10).toString();\n\n      if (responseTime.length === 1) responseTime = `0${responseTime}`;\n\n      const logStr = [\n        tokens.method(req, res),\n        tokens.url(req, res),\n        tokens.status(req, res),\n        responseTime\n      ].join('\\t\\t');\n\n      return `${logStr}ms`;\n    },\n    { stream: accessLogStream }\n  )\n);\n\n\napp.get('/', (req, res) => {\n  res.status(200).json({\n    data: {\n      message: 'Welcome to #BuildForSDG-Challenge-2020'\n    }\n  });\n});\n\napp.use('/api/v1/on-covid-19/json', jsonResponseEstimation);\napp.use('/api/v1/on-covid-19/xml', xmlResponseEstimation);\napp.use('/api/v1/on-covid-19/logs', logsResponseEstimation);\n\napp.use((err, req, res, next) => {\n  res.status(err.status || 500).json({\n    errors: {\n      message: err.message,\n      error: {}\n    }\n  });\n});\n\n\napp.listen(PORT);\n\nexport default app;\n"],"file":"app.js"}